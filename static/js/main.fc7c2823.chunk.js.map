{"version":3,"sources":["DigitButton.jsx","OperationButton.jsx","App.jsx","index.jsx"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","undefined","includes","previousOperand","evaluate","length","slice","prev","parseFloat","current","isNaN","computation","toString","App","useReducer","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fc7c2823.chunk.js","sourcesContent":["import { ACTIONS } from \"./App\";\r\n\r\nexport default function DigitButton({ dispatch, digit }) {\r\n  return (\r\n    <button\r\n        onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\r\n    >\r\n            {digit}\r\n    </button>\r\n  )\r\n}\r\n","import { ACTIONS } from \"./App\";\r\n\r\nexport default function OperationButton({ dispatch, operation }) {\r\n  return (\r\n    <button\r\n        onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })}\r\n    >\r\n            {operation}\r\n    </button>\r\n  )\r\n}\r\n","/* eslint-disable default-case */\n/* eslint-disable no-fallthrough */\n/* eslint-disable no-undef */\nimport { useReducer } from \"react\";\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nimport \"./styles.css\";\n\n\n\nexport const ACTIONS = {\n  ADD_DIGIT: \"add-digit\",\n  CHOOSE_OPERATION: \"choose-operation\",\n  CLEAR: \"clear\",\n  DELETE_DIGIT: \"delete-digit\",\n  EVALUATE: \"evaluate\",\n};\n\n// Logic\n\nfunction reducer(state, { type, payload }) {\n\n  switch (type) {\n    case ACTIONS.ADD_DIGIT:\n      if (state.overwrite) {\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        };\n      }\n      if (payload.digit === \".\" && state.currentOperand === undefined) {\n        return { ...state, currentOperand: \"0.\" };\n      }\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\n        return state;\n      }\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\n        return state;\n      }\n\n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\n      };\n\n    case ACTIONS.CHOOSE_OPERATION:\n      if (state.currentOperand == null && state.previousOperand == null) {\n        return state;\n      }\n\n      if (state.currentOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n        };\n      }\n\n      if (state.previousOperand == null) {\n        return {\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        };\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null,\n      };\n\n    case ACTIONS.CLEAR:\n      return {};\n\n\n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite) {\n        return {\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n\n      if(state.currentOperand == null) return state\n      if(state.currentOperand.length === 1) {\n        return { ...state, currentOperand: null }\n      }\n\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      }\n\n    case ACTIONS.EVALUATE:\n      if (\n        state.operation == null ||\n        state.currentOperand == null ||\n        state.previousOperand == null\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state),\n      };\n  }\n}\n\nfunction evaluate({ currentOperand, previousOperand, operation }) {\n  const prev = parseFloat(previousOperand);\n  const current = parseFloat(currentOperand);\n  if (isNaN(prev) || isNaN(current)) return \"\";\n  let computation = \"\";\n\n  switch (operation) {\n    case \"รท\":\n      computation = prev / current;\n      break;\n\n    case \"*\":\n      computation = prev * current;\n      break;\n\n    case \"+\":\n      computation = prev + current;\n      break;\n\n    case \"-\":\n      computation = prev - current;\n      break;\n  }\n\n  return computation.toString();\n}\n\n// Rendering\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n\n  const INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n    maximumFractionDigits: 0,\n  })\n  function formatOperand(operand) {\n    if (operand == null) return\n    const [integer, decimal] = operand.split('.')\n    if(decimal == null) return INTEGER_FORMATTER.format(integer)\n    return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n  }\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)}{operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.CLEAR })}\n      >\n        AC\n      </button>\n      <button onClick={() => dispatch({ type: ACTIONS.DELETE_DIGIT })}>DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button\n        className=\"span-two\"\n        onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\n      >\n        =\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}